assets
list of known ingredients
  contains names, how long they generally last.
  (in future they should also contain how to
  convert between different units.)

list of available ingredients
  contains list of ingredients available.
  names and dates of purchase.
  (and quantity is to be added. need unit too.)
  perhaps available ingredients should be instances of known ingredients?


list of cuisines
  contains names and list of required ingredients.
  (in future the file should also contain
    how much of each ingredients it requires,
    how nutritious they are,
    how long it takes to cook them.
  )

File structure seems sensible. No overwraps.


upon loading

instances of KnownIngredient are created and stored in an Array.
  @name
  @shelf_life
  (Rational @g_per_piece etc, Int @price etc)
  KnownIngredient class is a dictionary of ingredients.
  it should be created only once upon starting the program.
  (name too long. Ingredient, maybe?)

instances of AvailableIngredient are created and stored in arrays.
  @name
  @date_of_purchase
  @exp_date (reference KI)
  @days_left
  @quantity (it's already there, but not working.)
  in an array, there can be multiple instances of same ingredient:
    ex. two potatoes that expire tomorrow and one that expires next week
  so when a method tries to get the quantity,
  it should read the array thoroughly then sum.
  AvailableIngredient class is necessary
  to determine what I can cook right now.
  .extract method creates an array depending on @days_left.

instances of Cuisine are created and stored in an array.
  @name
  @required_ingredients (Array)
  @missing_ingredients (reference AI)
  (@time, @nutrition, @how_to_cook)
  !!!!!I can somehow feed an array of AvailableIngredient,
  so I can calculate
    1. of what cuisines I have all the ingredients,
    2. of what cuisines I have part of the ingredients.
  with instance methods of Cuisine that take array of AvailableIngredient.
  Cuisine.all_available?(AI)
    returns true and false
  Cuisine.missing_ingredients(AI)
    returns array of missing ingredients

FLOW:
  load known ingredients - check
  load available ingredients - check
  load cuisines - check

  using the array of all of the AvailableIngredient,
    create an array of cuisines with all the ingredients available. -check
    do not show now, just store.
  extract high priority AI,
  feed it to a method of Cuisine to count
  how many high priority stuff they use.
  sort the aforementioned array using the numbers just got. BATHROOM

Models seem generally fine.

problem: currently it is very troublesome to change the shape of the data,
because they are treated as arrays inside arrays.
there should probably an easy way around this; I should look for gems.
problem: if I only need one class of cuisine instead of
KnownCuisine and PossibleCuisine, perhaps I only need one Ingredient class?
